-- 1. Crear base de datos
CREATE DATABASE IF NOT EXISTS HyruleEventsDB;

-- 2. Crear usuario MySQL para conectarse a la base de datos con la contraseña correcta
CREATE USER IF NOT EXISTS 'hyrule_user'@'%' IDENTIFIED BY 'Congresos123Cunoc';

-- 3. Dar permisos al usuario sobre la base de datos
GRANT ALL PRIVILEGES ON HyruleEventsDB.* TO 'hyrule_user'@'%';
FLUSH PRIVILEGES;

-- 4. Usar la base de datos
USE HyruleEventsDB;

-- 5. Crear tabla usuarios
CREATE TABLE IF NOT EXISTS usuarios (
  id_usuario INT AUTO_INCREMENT PRIMARY KEY,
  nombre_completo VARCHAR(200) NOT NULL,
  foto_path VARCHAR(300),
  organizacion VARCHAR(200),
  correo_electronico VARCHAR(150) NOT NULL UNIQUE,
  telefono VARCHAR(50),
  numero_identificacion VARCHAR(50) NOT NULL UNIQUE,
  contrasena VARCHAR(255) NOT NULL,
  rol ENUM('USUARIO','PARTICIPANTE','ADMIN_SISTEMA','ADMIN_CONGRESO') NOT NULL DEFAULT 'USUARIO',
  estado ENUM('ACTIVO','INACTIVO') NOT NULL DEFAULT 'ACTIVO',
  fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  cartera_saldo DECIMAL(10,2) DEFAULT 0
);

-- 6. Tabla de roles adicionales (ponente, tallerista, asistente, comité científico, etc.)
CREATE TABLE IF NOT EXISTS roles_extra (
  id_rol_extra INT AUTO_INCREMENT PRIMARY KEY,
  nombre_rol VARCHAR(100) NOT NULL UNIQUE
);

-- Insertar roles extra posibles
INSERT IGNORE INTO roles_extra (nombre_rol) VALUES
('ASISTENTE'),
('PONENTE'),
('TALLERISTA'),
('COMITE_CIENTIFICO');

-- 7. Relación N:M entre usuarios y roles extra
CREATE TABLE IF NOT EXISTS usuario_roles_extra (
  id_usuario INT,
  id_rol_extra INT,
  PRIMARY KEY (id_usuario, id_rol_extra),
  FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE,
  FOREIGN KEY (id_rol_extra) REFERENCES roles_extra(id_rol_extra) ON DELETE CASCADE
);

-- 8. Insertar usuario administrador inicial
INSERT INTO usuarios (
    nombre_completo,
    correo_electronico,
    numero_identificacion,
    contrasena,
    rol
) VALUES (
    'Administrador General',
    'admin@hyruleevents.com',
    'ADMIN001',
    'admin123',
    'ADMIN_SISTEMA'
);

-- Tabla de instituciones
CREATE TABLE IF NOT EXISTS instituciones (
  id_institucion INT AUTO_INCREMENT PRIMARY KEY,
  nombre_institucion VARCHAR(200) NOT NULL UNIQUE,
  descripcion TEXT,
  direccion VARCHAR(300),
  telefono VARCHAR(50),
  fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Relación entre instituciones y administradores de congresos
-- Solo los usuarios con rol = 'ADMIN_CONGRESO' pueden estar aquí
CREATE TABLE IF NOT EXISTS administradores_institucion (
  id_institucion INT NOT NULL,
  id_usuario INT NOT NULL,
  PRIMARY KEY (id_institucion, id_usuario),
  FOREIGN KEY (id_institucion) REFERENCES instituciones(id_institucion) ON DELETE CASCADE,
  FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE
);

-- Tabla de congresos
CREATE TABLE IF NOT EXISTS congresos (
  id_congreso INT AUTO_INCREMENT PRIMARY KEY,
  id_institucion INT NOT NULL,
  nombre_congreso VARCHAR(200) NOT NULL,
  descripcion TEXT,
  fecha_inicio DATE NOT NULL,
  fecha_fin DATE NOT NULL,
  precio DECIMAL(10,2) NOT NULL CHECK (precio >= 35.00),
  ubicacion VARCHAR(200) NOT NULL,
  fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (id_institucion) REFERENCES instituciones(id_institucion) ON DELETE CASCADE
);
